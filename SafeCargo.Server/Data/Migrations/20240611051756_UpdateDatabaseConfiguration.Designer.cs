// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeCargo.Server.Data;

#nullable disable

namespace SafeCargo.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240611051756_UpdateDatabaseConfiguration")]
    partial class UpdateDatabaseConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SafeCargo.Server.Models.AccessLevel", b =>
                {
                    b.Property<string>("CodLevel")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CodLevel");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            CodLevel = "ADMIN",
                            CreatedAt = new DateTime(2024, 6, 11, 5, 17, 56, 386, DateTimeKind.Utc).AddTicks(7469),
                            DescLevel = "Administrador"
                        });
                });

            modelBuilder.Entity("SafeCargo.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodLevel")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CodLevel");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodLevel = "ADMIN",
                            CreatedAt = new DateTime(2024, 6, 11, 5, 17, 56, 387, DateTimeKind.Utc).AddTicks(8933),
                            PasswordHash = "TDcJSSTKJW9ZbJ8zjhDXhw==.V1i+/LU7c0gwZtZ1C61KBvBmSY6EOMbpwZBQMB39nWM=",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SafeCargo.Server.Models.User", b =>
                {
                    b.HasOne("SafeCargo.Server.Models.AccessLevel", "AccessLevel")
                        .WithMany()
                        .HasForeignKey("CodLevel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessLevel");
                });
#pragma warning restore 612, 618
        }
    }
}
