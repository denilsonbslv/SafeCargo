// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeCargo.Server.Data;

#nullable disable

namespace SafeCargo.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614050918_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SafeCargo.Server.Models.AccessLevel", b =>
                {
                    b.Property<string>("CodLevel")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CodLevel");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            CodLevel = "ADMIN",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 359, DateTimeKind.Utc).AddTicks(8159),
                            DescLevel = "Administrador",
                            Description = "Acesso total ao sistema, incluindo gerenciamento de usuários, veículos, mercadorias, relatórios e configurações do sistema."
                        },
                        new
                        {
                            CodLevel = "OPER",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 359, DateTimeKind.Utc).AddTicks(8162),
                            DescLevel = "Operador",
                            Description = "Acesso limitado para registrar entradas e saídas de veículos, atualizar status de mercadorias e visualizar relatórios."
                        },
                        new
                        {
                            CodLevel = "SUPV",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 359, DateTimeKind.Utc).AddTicks(8163),
                            DescLevel = "Supervisor",
                            Description = "Acesso para supervisionar as operações de entrada e saída de veículos, monitorar status de mercadorias, e gerar relatórios."
                        },
                        new
                        {
                            CodLevel = "AUDT",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 359, DateTimeKind.Utc).AddTicks(8164),
                            DescLevel = "Auditor",
                            Description = "Acesso para visualizar todos os registros e relatórios do sistema sem permissão para fazer alterações."
                        },
                        new
                        {
                            CodLevel = "VIST",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 359, DateTimeKind.Utc).AddTicks(8165),
                            DescLevel = "Visitante",
                            Description = "Acesso muito limitado apenas para visualizar informações públicas ou dados restritos aos visitantes."
                        });
                });

            modelBuilder.Entity("SafeCargo.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodLevel")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CodLevel");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodLevel = "ADMIN",
                            CreatedAt = new DateTime(2024, 6, 14, 5, 9, 18, 360, DateTimeKind.Utc).AddTicks(9536),
                            PasswordHash = "EL8T6Zxe9vGDHO0DB4fgPQ==.arevG9fQBmkNgwUgKJJebubwwpzUiYH62MWa0OOaCNc=",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SafeCargo.Server.Models.User", b =>
                {
                    b.HasOne("SafeCargo.Server.Models.AccessLevel", "AccessLevel")
                        .WithMany()
                        .HasForeignKey("CodLevel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessLevel");
                });
#pragma warning restore 612, 618
        }
    }
}
